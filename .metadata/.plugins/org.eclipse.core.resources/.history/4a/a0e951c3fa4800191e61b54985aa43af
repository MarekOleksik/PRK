package application;

import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;

/**
 *
 * @author Marek Oleksik
 */
public class Checkerboard {
	private double boardHeight;
	private double boardWidth;
	private double rectangleHeight;
	private double rectangleWidth;
	private final int NUMCOLS = 8;
	private final int NUMROWS = 8;
	private double rectangleSize;

	private AnchorPane gameboard = null;
	private final Color LIGHTCOLOR = Color.BEIGE;
	private final Color DARKCOLOR = Color.DARKGRAY;

	public Checkerboard() {
		
	}
	
	public Checkerboard(double boardWidth, double boardHeight) {
		this.boardWidth = boardWidth;
		this.boardHeight = boardHeight;
	}

	public AnchorPane build() {
		// Calculate the max width and height of the board squares using the
		// smallest board dimension
		if (boardWidth < boardHeight) {
			rectangleWidth = boardWidth / NUMCOLS;
			rectangleHeight = boardWidth / NUMROWS;
		} else {
			rectangleWidth = boardHeight / NUMCOLS;
			rectangleHeight = boardHeight / NUMROWS;
		}
		rectangleSize = rectangleWidth;
		gameboard = new AnchorPane();

		// Create board squares
		for (int i = 0; i < NUMROWS; i++) {
			for (int j = 0; j < NUMCOLS; j++) {

				// Create board square
				Rectangle boardSquare = new Rectangle();
				boardSquare.setWidth(rectangleWidth);
				boardSquare.setHeight(rectangleHeight);
				boardSquare.setX(rectangleWidth * j);
				boardSquare.setY(rectangleHeight * i);

				// Assign board square color
				if ((j % 2 == 0 && i % 2 != 0) || (j % 2 != 0 && i % 2 == 0)) {
					boardSquare.setFill(DARKCOLOR);
				} else {
					boardSquare.setFill(LIGHTCOLOR);
				}

				// Add board square to anchor pane
				gameboard.getChildren().add(boardSquare);
			}
		}
		return gameboard;
	}

	public AnchorPane getBoard() {
		return gameboard;
	}

	public double getWidth() {
		return boardWidth;
	}

	public double getHeight() {
		return boardHeight;
	}

	public double getRectangleWidth() {
		return rectangleWidth;
	}

	public double getRectangleHeight() {
		return rectangleHeight;
	}

	public double getRectangleSize() {
		return rectangleSize;
	}
	
	private int toBoard(double pixel) {
        return (int) ((pixel + rectangleSize / 2) / rectangleSize);
    }
	
	private Piece makePiece(PieceType type, int x, int y) {
        Piece piece = new Piece(type, x, y);

        piece.setOnMouseReleased(e -> {
            int newX = toBoard(piece.getLayoutX());
            int newY = toBoard(piece.getLayoutY());

            MoveResult result;

            if (newX < 0 || newY < 0 || newX >= boardWidth || newY >= boardHeight) {
                result = new MoveResult(MoveType.NONE);
            } else {
                result = tryMove(piece, newX, newY);
            }

            int x0 = toBoard(piece.getOldX());
            int y0 = toBoard(piece.getOldY());

            switch (result.getType()) {
                case NONE:
                    piece.abortMove();
                    break;
                case NORMAL:
                    piece.move(newX, newY);
                    board[x0][y0].setPiece(null);
                    board[newX][newY].setPiece(piece);
                    break;
                case KILL:
                    piece.move(newX, newY);
                    board[x0][y0].setPiece(null);
                    board[newX][newY].setPiece(piece);

                    Piece otherPiece = result.getPiece();
                    board[toBoard(otherPiece.getOldX())][toBoard(otherPiece.getOldY())].setPiece(null);
                    pieceGroup.getChildren().remove(otherPiece);
                    break;
            }
        });

        return piece;
    }


}